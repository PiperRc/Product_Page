

1)combining display:grid and display:flex/ using display flex in a display grid box

2)using differnt fr measurements to space elments in a grid

3)to animante navbar,have a parent element which will have width:0 % and postion properties,height:50%;,width:50%;top:0.
then a child element which will have the content

html:

  <nav class="hidden-navbar">
    <div class="hidden-links">
      <img src="images/icon-close.svg" alt="icon-close" class="x-icon">
      <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">Collections</a>
      <a href="#">Men</a>
      <a href="#">Women</a>
      <a href="#">About</a>
      <a href="#">Contact</a>
    </div>
  </nav>

  css:

.hidden-navbar{
   background-color: white;
   width:0%;
   height:100vh;
   position: fixed;
   top: 0;
   z-index: 100;
   transition: width .4s ease-in-out ;
  
   
}

.hidden-links{

   visibility: hidden;
   opacity: 0;
   transition: opacity .4s linear;

   width: 100%;
   height: 100%;
   font-size: 2rem;
   display: grid;
   grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr;
   align-items: end;
   padding: 1.5rem;
   padding-top: 0;
   padding-bottom: 25rem;
}

.x-icon{
align-self: center;
}

.hidden-navbar a {
   text-decoration: none;
   color: black;
   font-weight: bold;
}

/* when hamburger is clicked */


.hidden-navbar-reveal {
  width:50%;
}
.hidden-links-reveal{
   visibility: visible;
   opacity: 1;
}

js:
const body=document.querySelector('body');

const hamburger = document.querySelector('.hamburger');

const hiddenNavbar = document.querySelector('.hidden-navbar');

const hiddenLinks=document.querySelector('.hidden-links');

const container= document.querySelector('.container')


const x =document.querySelector('.x-icon');


hamburger.addEventListener('click', () => {
  
    hiddenNavbar.classList.add('hidden-navbar-reveal');
    hiddenLinks.classList.add('hidden-links-reveal')
  
    container.classList.add('container-opacity');
   
})

x.addEventListener('click',()=>{
    hiddenNavbar.classList.remove('hidden-navbar-reveal');
    hiddenLinks.classList.remove('hidden-links-reveal')
    container.classList.remove('container-opacity');
    
})

4)::before and ::after not working on img->place in div

5)psudeo elements with justify
create a separate class that can be added afterwards

html
<div>

<div>

css
div::before{
    display:none;
}

.div-reveal::before{
    display:block;
}

js
const div=document.querySelector('div');

div.addEventListener('click',=>{
    div.classList.add('div-reveal')
})

4)make img gallery that moves

html:
  <div class="product-image">
        <img src="images/image-product-1.jpg" alt="image-product-1">

        <div class="previous-icon">
          <img src="images/icon-previous.svg" alt="icon-previous">
        </div>

        <div class="next-icon">
          <img src="images/icon-next.svg" alt="icon-next">
        </div>

      </div>

css:
.product-image {
   /* border:2px solid darkorchid; */
   position: relative;

}

.product-image img:nth-child(1) {
   width: 100%;
}

.previous-icon,
.next-icon {
   width: 4rem;
   position: absolute;
   /* border: 2px solid darkred; */
   top: 50%;
   transform: translateY(-50%);
   border-radius: 50%;
   padding: 1.3rem;
   background-color: white;
}

.previous-icon,
.next-icon {
   cursor: pointer;
}

.previous-icon {
   left: 1rem;

}

.next-icon {
   right: 1rem;
}

js:
const leftArrow = document.querySelector('.previous-icon');

const rightArrow = document.querySelector('.next-icon');

const productImage = document.querySelector('.product-image img');

let imgNum = 1;

const imgSrc = {
    1: 'images/image-product-1.jpg',
    2: 'images/image-product-2.jpg',
    3: 'images/image-product-3.jpg',
    4: 'images/image-product-4.jpg',

}
leftArrow.addEventListener('click', () => {
    if (imgNum > 1) {
        --imgNum;
    }
    else if (imgNum ===1){
        imgNum=4;
    }

    productImage.src = imgSrc[imgNum];

})

rightArrow.addEventListener('click', () => {
    if (imgNum < 4) {
        ++imgNum;
    }

    else if(imgNum===4){
        imgNum=1;
    }

    productImage.src = imgSrc[imgNum];

})

5)

use:
<body>
   <div class='container'>
   <nav class='hidden-navbar'>
   </nav>
      <main>
          <nav>
          </nav>
      </main>
    </div>
</body>


6)centering:
 top: 50%;
   transform: translateY(-50%);


7)centering a absoulte position :
  border: 1px solid green;
   width: set width
   height:set heigh
   margin: auto;
   top: 0rem;
   right: 0;
   left: 0;
   bottom:0;

8)
center using grid
section {
  display: grid;
  justify-content: center;
  align-content: center;
}
